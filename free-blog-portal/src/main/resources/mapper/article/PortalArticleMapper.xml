<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.blog.core.article.dao.PortalArticleMapper">

    <select id="selectArticleByPage" resultType="com.blog.core.article.vo.PortalArticleListVO">
        SELECT
            pa.article_id articleId,
            pa.article_title articleTitle,
            pa.article_release_date articleReleaseDate,
            pa.article_content_html articleContentHtml,
            pa.article_content_markdown articleContentMarkDown,
            pa.article_desc articleDesc,
            pa.article_images articleImages,
            pa.article_top_status articleTopStatus,
            pa.article_comment_status articleCommentStatus,
            pa.article_fine_note_status articleFineNoteStatus,
            pa.article_user_id articleUserId,
            CASE
            WHEN pu.nick_name IS NOT NULL THEN
                pu.nick_name
            ELSE
                pu.user_name
            END articleAuthor,
            pu.avatar articleAuthorImage
        FROM
            portal_article pa
        LEFT JOIN portal_user pu ON pa.article_user_id = pu.user_id
        WHERE
          pa.enable = '1'
          AND pa.article_release_status = '1'
    </select>

    <select id="selectArticleByArticleId" parameterType="java.lang.String"
            resultType="com.blog.core.article.vo.PortalArticleDetailsVO">
         SELECT
            pa.article_id articleId,
            pa.article_title articleTitle,
            pa.article_release_date articleReleaseDate,
            pa.article_content_html articleContentHtml,
            pa.article_content_markdown articleContentMarkDown,
            pa.article_desc articleDesc,
            pa.article_images articleImages,
            pa.article_top_status articleTopStatus,
            pa.article_comment_status articleCommentStatus,
            pa.article_fine_note_status articleFineNoteStatus,
            pa.article_user_id articleUserId,
            CASE
            WHEN pu.nick_name IS NOT NULL THEN
                pu.nick_name
            ELSE
                pu.user_name
            END articleAuthor,
            pu.avatar articleAuthorImage
        FROM
            portal_article pa
        LEFT JOIN portal_user pu ON pa.article_user_id = pu.user_id
        WHERE pa.article_id = #{articleId}
    </select>

    <update id="updateReadArticleByArticleId" parameterType="java.lang.String">
        UPDATE portal_article
        SET like_number = like_number + 1
        WHERE article_id = #{articleId}
    </update>

    <update id="updateApproves" parameterType="java.lang.String">
        UPDATE portal_article
        SET approves = approves + 1
        WHERE id = #{articleId}
    </update>

    <update id="updateTemperature" parameterType="java.lang.String">
        UPDATE portal_article
        SET temperature = temperature + 1
        WHERE id = #{articleId}
    </update>

    <update id="updateComments" parameterType="java.lang.String">
        UPDATE portal_article
        SET comments = comments + 1
        WHERE id = #{articleId}
    </update>

    <update id="checkArticle" parameterType="com.blog.core.article.entity.PortalArticle">
        UPDATE portal_article
        SET article_status = #{articleStatus},
        release_status = #{releaseStatus},
        release_date = #{releaseDate}
        WHERE id = #{articleId}
    </update>

    <update id="submitCheckArticle" parameterType="com.blog.core.article.entity.PortalArticle">
        UPDATE portal_article
        SET article_status = #{articleStatus},
        article_title = #{articleTitle},
        article_content = #{articleContent},
        article_tag = #{articleTag},
        article_images = #{articleImages},
        article_user_id = #{articleUserId}
        WHERE id = #{articleId}
    </update>

    <insert id="saveDraft" parameterType="com.blog.core.article.entity.PortalArticle">
        INSERT INTO
        portal_article
        (
            `article_title`,
            `article_content`,
            `article_user_id`,
            `article_tag`,
            `article_images`,
            `article_status`,
            `release_status`,
            `create_time`,
            `create_name`
        )
        VALUES
        (
            #{articleTitle},
            #{articleContent},
            #{articleUserId},
            #{articleTag},
            #{articleImages},
            #{articleStatus},
            #{releaseStatus},
            #{createTime},
            #{createName}
        )

    </insert>

    <delete id="deleteDraft" parameterType="java.lang.String">
        DELETE FROM portal_article WHERE id = #{articleId}
    </delete>
</mapper>
