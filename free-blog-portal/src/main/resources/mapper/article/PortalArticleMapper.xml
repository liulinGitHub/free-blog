<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.blog.core.article.dao.PortalArticleMapper">

    <select id="selectArticleByPage" resultType="com.blog.core.article.vo.PortalArticleInfoVO">
        SELECT
            article.id,
            article.article_title AS articleTitle,
            article.release_date AS releaseDate,
            article.article_content AS articleContent,
            article.article_user_id AS articleUserId,
            article.article_status AS articleStatus,
            article.release_status AS releaseStatus,
            article.tag_id AS tagId,
            article.article_images AS articleImages,
            article.approves AS approves,
            article.comment_status AS commentStatus,
            article.like_number AS likeNumber,
            article.read_number AS readNumber,
            article.article_type AS articleType,
            article.article_top AS articleTop,
            article.article_fine_note AS articleFineNote,
            article.article_user_id AS articleUserId,
            article.recommend_status AS recommendStatus,
            CASE
            WHEN user.nick_name IS NOT NULL THEN
                user.nick_name
            ELSE
                user.user_name
            END AS articleAuthor,
            user.avatar AS articleAuthorImage
        FROM
            portal_article article
        LEFT JOIN portal_user AS user ON article.article_user_id = user .id
        WHERE
          article.is_enable = '1'
          AND article.release_status = '1'
    </select>

    <select id="findArticleById" resultType="com.blog.core.article.vo.PortalArticleInfoVO" parameterType="java.lang.String">
         SELECT
            article.id,
            article.article_title AS articleTitle,
            article.release_date AS releaseDate,
            article.article_content AS articleContent,
            article.tag_id AS tagId,
            article.article_images AS articleImages,
            article.approves AS approves,
            article.comments AS comments,
            article.like_number AS likeNumber,
            article.read_number AS readNumber,
            article.article_type AS articleType,
            article.article_top AS articleTop,
            article.comment_status AS commentStatus,
            article.article_fine_note AS articleFineNote,
            CASE
            WHEN USER .nick_name IS NOT NULL THEN
                USER .nick_name
            ELSE
                user_name
            END AS articleAuthor,
            user.avatar AS articleAuthorImage
        FROM
            portal_article article
            LEFT JOIN portal_user user ON article.article_user_id = user.id
        WHERE article.id = #{id}
    </select>

    <update id="updateArticleById">

    </update>

    <update id="updateReadArticle" parameterType="java.lang.String">
        UPDATE portal_article
        SET like_number = like_number + 1
        WHERE id = #{articleId}
    </update>

    <update id="updateApproves" parameterType="java.lang.String">
        UPDATE portal_article
        SET approves = approves + 1
        WHERE id = #{articleId}
    </update>

    <update id="updateTemperature" parameterType="java.lang.String">
        UPDATE portal_article
        SET temperature = temperature + 1
        WHERE id = #{articleId}
    </update>

    <update id="updateComments" parameterType="java.lang.String">
        UPDATE portal_article
        SET comments = comments + 1
        WHERE id = #{articleId}
    </update>

    <update id="checkArticle" parameterType="com.blog.core.article.domain.PortalArticle">
        UPDATE portal_article
        SET article_status = #{articleStatus},
        release_status = #{releaseStatus},
        release_date = #{releaseDate}
        WHERE id = #{articleId}
    </update>

    <update id="submitCheckArticle" parameterType="com.blog.core.article.domain.PortalArticle">
        UPDATE portal_article
        SET article_status = #{articleStatus},
        article_title = #{articleTitle},
        article_content = #{articleContent},
        article_tag = #{articleTag},
        article_images = #{articleImages},
        article_user_id = #{articleUserId}
        WHERE id = #{articleId}
    </update>

    <insert id="saveDraft" parameterType="com.blog.core.article.domain.PortalArticle">
        INSERT INTO
        portal_article
        (
            `article_title`,
            `article_content`,
            `article_user_id`,
            `article_tag`,
            `article_images`,
            `article_status`,
            `release_status`,
            `create_time`,
            `create_name`
        )
        VALUES
        (
            #{articleTitle},
            #{articleContent},
            #{articleUserId},
            #{articleTag},
            #{articleImages},
            #{articleStatus},
            #{releaseStatus},
            #{createTime},
            #{createName}
        )

    </insert>

    <delete id="deleteDraft" parameterType="java.lang.String">
        DELETE FROM portal_article WHERE id = #{articleId}
    </delete>
</mapper>
