<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.blog.core.comment.dao.PortalCommentMapper">

    <resultMap id="portalCommentTreeList" type="com.blog.core.comment.vo.PortalCommentTree">
        <id property="commentId" column="commentId"/>
        <result property="commentContent" column="commentContent"/>
        <result property="parentId" column="parentId"/>
        <result property="commentTime" column="commentTime"/>
        <result property="approves" column="approves"/>
        <collection property="commentUser" ofType="com.blog.core.system.user.entity.PortalCommonUser">
            <id property="userId" column="userId"/>
            <result property="nickName" column="nickName"/>
            <result property="avatar" column="avatar"/>
        </collection>
    </resultMap>

    <select id="selectPortalCommentTree" parameterType="java.lang.Integer"
            resultMap="portalCommentTreeList">
        SELECT
            pc.comment_id commentId,
            pc.comment_content commentContent,
            pc.comment_user_id,
            pc.parent_id parentId,
            pc.comment_time commentTime,
            pc.approves approves,
            pu.nick_name nickName,
            pu.avatar avatar,
            pu.user_id userId
        FROM
            portal_comment pc
            LEFT JOIN portal_user pu ON pc.comment_user_id = pu.user_id
        WHERE
            pc.enable = '1'
        AND
            article_id = #{articleId}
        ORDER BY
            comment_time DESC
    </select>

    <select id="queryCommentById" resultType="com.blog.core.comment.vo.PortalCommentVO">
        SELECT
            comment .id AS id,
            comment .comment_content AS commentContent,
            comment .parent_id AS parentId,
            comment .article_id AS articleId,
            comment .is_parent AS isParent,
            comment .comment_time AS commentTime,
            comment .approves AS approves,
	        CASE WHEN USER .nick_name IS NOT NULL
	        THEN  USER .nick_name
            ELSE  user_name
            END AS author,
            user.avatar AS avatar
        FROM
	        portal_comment AS comment
        LEFT JOIN portal_user AS user ON `comment`.comment_user_id = `user`.id
        WHERE comment.id = #{commentId}
        ORDER BY comment.comment_time desc
    </select>

    <select id="queryCommentByParentId" resultType="com.blog.core.comment.vo.PortalCommentVO">
        SELECT
            comment .id AS id,
            comment .comment_content AS commentContent,
            comment .parent_id AS parentId,
            comment .article_id AS articleId,
            comment .is_parent AS isParent,
            comment .comment_time AS commentTime,
            comment .approves AS approves,
            CASE WHEN USER .nick_name IS NOT NULL
            THEN  USER .nick_name
            ELSE  user_name
            END AS author,
            user.avatar AS avatar
        FROM
            portal_comment AS comment
        LEFT JOIN portal_user AS user ON `comment`.comment_user_id = `user`.id
        WHERE comment.parent_id = #{parentId}
        ORDER BY comment.comment_time desc
    </select>

    <select id="queryCommentByArticleId" resultType="com.blog.core.comment.vo.PortalCommentVO" parameterType="java.lang.Integer">
        SELECT
            ccomment_id,
            comment_content,
            comment_user_id,
            parent_id,
            comment_time,
            approves
        CASE
            WHEN pu.nick_name IS NOT NULL THEN
            pu.nick_name ELSE user_name
            END author,
            pu.avatar avatar
        FROM
            portal_comment pc
            LEFT JOIN portal_user pu ON pc.comment_user_id = pu.user_id
        WHERE
            pc.article_id = #{articleId}
            AND pc.is_parent = '1'
        ORDER BY
            pc.comment_time DESC
    </select>

    <!--auto generated Code-->
    <insert id="insertPortalComment" useGeneratedKeys="true" keyProperty="id" parameterType="com.blog.core.comment.entity.PortalComment">
        INSERT INTO portal_comment (
            comment_content,
            comment_user_id,
            parent_id,
            article_id,
            comment_time,
            enable,
            create_id,
            create_time
        )
        VALUES (
            #{commentContent},
            #{commentUserId},
            #{parentId},
            #{articleId},
            #{commentTime},
            #{enable},
            #{createId},
            #{createTime}
        )
    </insert>
</mapper>
